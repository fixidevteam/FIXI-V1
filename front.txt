<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Prise de rendez-vous au garage || SHADOW007</title>
        <!-- css tailwind -->
        <script src="https://cdn.tailwindcss.com"></script>

        <!-- Flatpickr for date selection -->
        <link
            rel="stylesheet"
            href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
        />
        <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
        <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
    </head>
    <body class="bg-gray-50 p-6 flex justify-center items-center min-h-screen">
        <div class="w-full max-w-6xl">
            <!-- Confirmation Modal for Modify -->
            <div
                id="confirmationModalModify"
                class="fixed inset-0 bg-white bg-opacity-30 backdrop-blur-[2px] flex items-center justify-center hidden z-50"
            >
                <div class="bg-white rounded-lg p-6 w-96 shadow-lg">
                    <h2 class="text-lg font-bold text-gray-800">
                        Confirmation de modification
                    </h2>
                    <p class="text-gray-600 mt-2">
                        Êtes-vous sûr de vouloir modifier la date et l'heure du
                        rendez-vous ?
                    </p>
                    <div class="flex justify-end mt-4">
                        <button
                            onclick="toggleModal(false, 'confirmationModalModify')"
                            class="px-4 py-2 !bg-gray-300 !text-gray-800 rounded mr-2"
                        >
                            Annuler
                        </button>
                        <button
                            onclick="confirmModify()"
                            class="px-4 py-2 bg-red-500 ! text-white rounded hover:bg-red-600"
                        >
                            Confirmer
                        </button>
                    </div>
                </div>
            </div>

            <!-- Confirmation Modal for Cancel -->
            <div
                id="confirmationModalCancel"
                class="fixed inset-0 bg-white bg-opacity-30 backdrop-blur-[2px] flex items-center justify-center hidden z-50"
            >
                <div class="bg-white rounded-lg p-6 w-96 shadow-lg">
                    <h2 class="text-lg font-bold text-gray-800">
                        Confirmation d'annulation
                    </h2>
                    <p class="text-gray-600 mt-2">
                        Êtes-vous sûr de vouloir annuler le rendez-vous ? Cette
                        action est irréversible.
                    </p>
                    <div class="flex justify-end mt-4">
                        <button
                            onclick="toggleModal(false, 'confirmationModalCancel')"
                            class="px-4 py-2 !bg-gray-300 !text-gray-800 rounded mr-2"
                        >
                            Annuler
                        </button>
                        <button
                            onclick="confirmCancel()"
                            class="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
                        >
                            Confirmer
                        </button>
                    </div>
                </div>
            </div>
            <!-- Summary Section -->
            <div
                id="summary"
                class="hidden bg-white p-4 shadow-lg rounded-lg mb-8"
            >
                <p class="text-sm text-gray-700 mb-2">Date du rendez-vous:</p>
                <div
                    class="flex justify-between items-center space-y-2 flex-wrap"
                >
                    <!-- date & time -->
                    <div>
                        <span id="selected-date" class="font-semibold"></span> à
                        <span id="selected-time" class="font-semibold"></span>.
                    </div>
                    <!-- actions btns -->
                    <div class="flex gap-4">
                        <button
                            id="modify-btn"
                            class="px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-lg focus:ring-4 focus:ring-red-300"
                        >
                            Modifier
                        </button>
                        <button
                            id="cancel-btn"
                            class="px-4 py-2 text-sm font-medium !text-gray-700 !bg-white border border-gray-300 !hover:bg-gray-50 rounded-lg focus:ring-4 focus:ring-gray-200"
                        >
                            Annuler
                        </button>
                    </div>
                </div>
            </div>
            <div
                class="flex-column justify-center align-items-center bg-white p-8 rounded-lg shadow-lg w-full max-w-6xl"
            >
                <h2
                    class="text-xl text-gray-900 font-bold mb-4 text-center"
                    id="progress-title"
                >
                    Veuillez choisir la date du rendez-vous
                </h2>
                <div class="m-auto w-full h-0.5 bg-gray-100 my-8"></div>
                <!-- Loading Spinner -->
                <div
                    id="loading-spinner"
                    class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center z-50"
                >
                    <div
                        class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-red-600"
                    ></div>
                </div>
                <!-- Progress Indicator -->
                <div
                    class="m-auto flex items-center justify-center w-full text-sm font-medium text-center text-gray-500 sm:text-base mb-8 scale-[0.7] md:scale-100"
                >
                    <!-- Step 1 -->
                    <div
                        id="step1-indicator"
                        class="flex w-full items-center text-gray-500 sm:after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-2"
                    >
                        <svg
                            class="w-3.5 h-3.5 sm:w-6 sm:h-6"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                fill-rule="evenodd"
                                clip-rule="evenodd"
                                d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM16.0303 8.96967C16.3232 9.26256 16.3232 9.73744 16.0303 10.0303L11.0303 15.0303C10.7374 15.3232 10.2626 15.3232 9.96967 15.0303L7.96967 13.0303C7.67678 12.7374 7.67678 12.2626 7.96967 11.9697C8.26256 11.6768 8.73744 11.6768 9.03033 11.9697L10.5 13.4393L12.7348 11.2045L14.9697 8.96967C15.2626 8.67678 15.7374 8.67678 16.0303 8.96967Z"
                                fill="currentColor"
                            />
                        </svg>
                        <!-- Text for medium and larger screens -->
                        <span class="hidden md:block md:ms-1">Date</span>
                    </div>

                    <!-- Step 2 -->
                    <div
                        id="step2-indicator"
                        class="flex w-full items-center text-gray-500 sm:after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-2"
                    >
                        <svg
                            class="w-3.5 h-3.5 sm:w-6 sm:h-6"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                fill-rule="evenodd"
                                clip-rule="evenodd"
                                d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM16.0303 8.96967C16.3232 9.26256 16.3232 9.73744 16.0303 10.0303L11.0303 15.0303C10.7374 15.3232 10.2626 15.3232 9.96967 15.0303L7.96967 13.0303C7.67678 12.7374 7.67678 12.2626 7.96967 11.9697C8.26256 11.6768 8.73744 11.6768 9.03033 11.9697L10.5 13.4393L12.7348 11.2045L14.9697 8.96967C15.2626 8.67678 15.7374 8.67678 16.0303 8.96967Z"
                                fill="currentColor"
                            />
                        </svg>
                        <!-- Text for medium and larger screens -->
                        <span class="hidden md:block md:ms-1">Heure</span>
                    </div>

                    <!-- Step 3 -->
                    <div
                        id="step3-indicator"
                        class="flex w-full items-center text-gray-500 sm:after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-2"
                    >
                        <svg
                            class="w-3.5 h-3.5 sm:w-8 sm:h-8"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                fill-rule="evenodd"
                                clip-rule="evenodd"
                                d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM16.0303 8.96967C16.3232 9.26256 16.3232 9.73744 16.0303 10.0303L11.0303 15.0303C10.7374 15.3232 10.2626 15.3232 9.96967 15.0303L7.96967 13.0303C7.67678 12.7374 7.67678 12.2626 7.96967 11.9697C8.26256 11.6768 8.73744 11.6768 9.03033 11.9697L10.5 13.4393L12.7348 11.2045L14.9697 8.96967C15.2626 8.67678 15.7374 8.67678 16.0303 8.96967Z"
                                fill="currentColor"
                            />
                        </svg>
                        <!-- Text for medium and larger screens -->
                        <span class="hidden md:block md:ms-1"
                            >Vérification</span
                        >
                    </div>

                    <!-- Step 4 -->
                    <div
                        id="step4-indicator"
                        class="flex items-center text-gray-500"
                    >
                        <svg
                            class="w-3.5 h-3.5 sm:w-5 sm:h-5"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            xmlns="http://www.w3.org/2000/svg"
                        >
                            <path
                                fill-rule="evenodd"
                                clip-rule="evenodd"
                                d="M22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2C17.5228 2 22 6.47715 22 12ZM16.0303 8.96967C16.3232 9.26256 16.3232 9.73744 16.0303 10.0303L11.0303 15.0303C10.7374 15.3232 10.2626 15.3232 9.96967 15.0303L7.96967 13.0303C7.67678 12.7374 7.67678 12.2626 7.96967 11.9697C8.26256 11.6768 8.73744 11.6768 9.03033 11.9697L10.5 13.4393L12.7348 11.2045L14.9697 8.96967C15.2626 8.67678 15.7374 8.67678 16.0303 8.96967Z"
                                fill="currentColor"
                            />
                        </svg>
                        <!-- Text for medium and larger screens -->
                        <span class="hidden md:block md:ms-1"
                            >Confirmation</span
                        >
                    </div>
                </div>
                <!-- Error Message Container -->
                <div
                    id="error-message"
                    class="hidden p-4 mb-6 text-sm text-red-600 bg-red-50 rounded-lg"
                ></div>

                <!-- Step 1: Date Selection -->
                <div id="step1" class="step active">
                    <div class="mb-6">
                        <label
                            for="datePicker"
                            class="block text-sm font-medium text-gray-700 mb-2"
                        >
                            Choisir la date:
                        </label>
                        <input
                            type="text"
                            id="datePicker"
                            class="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-red-500 focus:border-red-500"
                            placeholder="Choisir la date"
                            readonly
                        />
                    </div>

                    <button
                        id="nextStep1"
                        class="w-full sm:w-auto px-5 py-2.5 rounded-[20px] text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300"
                    >
                        Suivant
                    </button>
                </div>

                <!-- Step 2: Time Slot Selection -->
                <div id="step2" class="step hidden">
                    <div id="times" class="times"></div>
                    <div class="flex gap-4 mt-6">
                        <button
                            id="prev1"
                            class="w-full sm:w-auto px-5 py-2.5 rounded-[20px] text-sm font-medium !text-gray-900 !bg-white !border !border-gray-300 focus:outline-none !hover:bg-gray-100 focus:ring-4 focus:ring-gray-100 hidden"
                        >
                            Choisir autre date
                        </button>
                        <button
                            id="nextStep2"
                            class="w-full sm:w-auto px-5 py-2.5 rounded-[20px] text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300"
                        >
                            Suivant
                        </button>
                    </div>
                </div>

                <!-- Step 3: Personal Details and Confirmation -->
                <div id="step3" class="step hidden">
                    <form id="bookingForm" class="mt-6">
                        <div class="mb-6">
                            <input
                                type="text"
                                id="full_name"
                                class="w-full p-2.5 border border-gray-300 focus:ring-red-500 focus:border-red-500"
                                placeholder="Votre nom"
                            />
                        </div>
                        <div class="mb-6">
                            <input
                                type="tel"
                                id="phone"
                                value="+212"
                                class="w-full p-2.5 border border-gray-300 focus:ring-red-500 focus:border-red-500"
                                placeholder="Votre numéro de téléphone"
                            />
                        </div>
                        <div class="mb-6">
                            <input
                                type="email"
                                id="email"
                                class="w-full p-2.5 border border-gray-300 focus:ring-red-500 focus:border-red-500"
                                placeholder="Adresse E-mail"
                            />
                        </div>
                        <div class="mb-6">
                            <select
                                id="categorie_de_service"
                                name="categorie_de_service"
                                class="w-full p-2.5 border border-gray-300 focus:ring-red-500 focus:border-red-500"
                            ></select>
                        </div>
                        <div class="mb-6">
                            <select
                                id="modele"
                                name="modele"
                                class="w-full p-2.5 border border-gray-300 focus:ring-red-500 focus:border-red-500"
                            ></select>
                        </div>
                        <div class="mb-6">
                            <input
                                type="text"
                                id="objet_du_RDV"
                                class="w-full p-2.5 border border-gray-300 focus:ring-red-500 focus:border-red-500"
                                placeholder="Message (optionnel)"
                            />
                        </div>
                        <div class="flex gap-4">
                            <button
                                type="submit"
                                class="w-full sm:w-auto px-5 py-2.5 rounded-[20px] text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300"
                            >
                                Suivant
                            </button>
                        </div>
                    </form>
                </div>

                <!-- Step 4: Verification -->
                <div id="step4" class="step hidden">
                    <div class="mt-6">
                        <p class="text-sm text-gray-600 mb-4">
                            Veuillez entrer le code de confirmation reçu pour
                            confirmer votre rendez-vous.
                        </p>
                        <input
                            type="text"
                            id="verificationCode"
                            class="w-full p-2.5 border border-gray-300 rounded-lg focus:ring-red-500 focus:border-red-500 mb-4"
                            placeholder="Entrez le code de vérification"
                            required
                        />
                        <p id="resendNote" class="text-sm text-gray-500 mb-4">
                            Vous pouvez demander un nouveau code après 60
                            secondes.
                        </p>
                    </div>
                    <div class="flex gap-4 mt-6">
                        <button
                            id="verifyCode"
                            class="w-full sm:w-auto px-5 py-2.5 rounded-[20px] text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:ring-4 focus:ring-red-300"
                        >
                            Confirmer
                        </button>
                        <button
                            id="resendCode"
                            class="w-full sm:w-auto px-5 py-2.5 rounded-[20px] text-sm font-medium !text-red-600 !border !border-red-600 !bg-white !hover:bg-red-50 !focus:ring-4 !focus:ring-red-300 !disabled:opacity-50 !disabled:cursor-not-allowed"
                            disabled
                        >
                            Renvoyer le code
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <script>
            let availableDates = [];
            let disabledDates = [];
            let selectedDate = "";
            let selectedTime = "";
            let verificationData = null; // To store verification response

            // Function to get query parameters from the URL
            function getQueryParam(param) {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get(param);
            }

            // Extract garage_ref from the URL
            let garageRef = getQueryParam("garage_ref");

            if (!garageRef) {
                showError("Garage reference is missing in the URL.");
            } else {
                fetchAvailableDates();
            }

            // Function to show error messages
            function showError(message) {
                const errorMessageDiv =
                    document.getElementById("error-message");
                errorMessageDiv.innerText = message;
                errorMessageDiv.classList.remove("hidden");
                errorMessageDiv.classList.remove("text-green-600");
                errorMessageDiv.classList.add("text-red-600");
            }

            // Function to show success messages
            function showSuccess(message) {
                const errorMessageDiv =
                    document.getElementById("error-message");
                errorMessageDiv.innerText = message;
                errorMessageDiv.classList.remove("hidden");
                errorMessageDiv.classList.remove("text-red-600");
                errorMessageDiv.classList.add("text-green-600");
            }

            // Function to clear error messages
            function clearError() {
                const errorMessageDiv =
                    document.getElementById("error-message");
                errorMessageDiv.innerText = "";
                errorMessageDiv.classList.add("hidden");
            }

            // Function to show the loading spinner
            function showLoading() {
                document
                    .getElementById("loading-spinner")
                    .classList.remove("hidden");
            }

            // Function to hide the loading spinner
            function hideLoading() {
                document
                    .getElementById("loading-spinner")
                    .classList.add("hidden");
            }

            // Function to update the progress indicator
            function updateProgressIndicator(step) {
                const steps = [
                    "step1-indicator",
                    "step2-indicator",
                    "step3-indicator",
                    "step4-indicator",
                ];
                const checkIcons = [
                    "step1-check",
                    "step2-check",
                    "step3-check",
                    "step4-check",
                ];

                steps.forEach((stepId, index) => {
                    const stepElement = document.getElementById(stepId);
                    const checkIcon = document.getElementById(
                        checkIcons[index]
                    );

                    if (index < step) {
                        // Active step: Red color and show the check icon
                        stepElement.classList.add("text-red-600");
                        stepElement.classList.remove("text-gray-500");
                    } else {
                        // Inactive step: Gray color and hide the check icon
                        stepElement.classList.add("text-gray-500");
                        stepElement.classList.remove("text-red-600");
                    }
                });
            }

            // Function to update the h2 title based on the current step
            function updateStepTitle(step) {
                const stepTitles = {
                    1: "Veuillez choisir la date du rendez-vous",
                    2: "Veuillez préciser l'heure du rendez-vous",
                    3: "Saisissez vos informations",
                    4: "Vérification",
                };

                const h2Element = document.getElementById("progress-title");
                if (h2Element && stepTitles[step]) {
                    h2Element.textContent = stepTitles[step];
                }
            }

            // Function to update the summary section
            function updateSummary(date, time) {
                const summaryDiv = document.getElementById("summary");
                const selectedDateSpan =
                    document.getElementById("selected-date");
                const selectedTimeSpan =
                    document.getElementById("selected-time");

                if (date && time) {
                    // Format the date to d/m/Y format
                    const formattedDate = formatDateToDMY(date); // Convert Y-m-d to d/m/Y
                    // Format the time to remove seconds (if present)
                    const formattedTime = time.includes(":")
                        ? time.slice(0, 5)
                        : time; // Ensure "HH:MM" format
                    selectedDateSpan.textContent = formattedDate;
                    selectedTimeSpan.textContent = formattedTime;
                    summaryDiv.classList.remove("hidden"); // Show the summary section
                } else {
                    summaryDiv.classList.add("hidden"); // Hide the summary section if no date/time is selected
                }
            }

            // Helper function to convert Y-m-d to d/m/Y
            function formatDateToDMY(date) {
                const [year, month, day] = date.split("-");
                return `${day}/${month}/${year}`; // Convert to d/m/Y format
            }

            // Function to show a specific step
            function showStep(stepId) {
                // Hide all steps
                document.querySelectorAll(".step").forEach((step) => {
                    step.classList.add("hidden");
                });

                // Show the current step
                document.getElementById(stepId).classList.remove("hidden");

                // Update the progress indicator
                const stepNumber = Number(stepId.replace("step", ""));
                updateProgressIndicator(stepNumber);

                // Update the h2 title
                updateStepTitle(stepNumber);

                // Update the summary section if on Step 3 or Step 4
                if (stepNumber >= 3 && selectedDate && selectedTime) {
                    updateSummary(selectedDate, selectedTime);
                } else {
                    updateSummary("", ""); // Hide the summary section if no date/time is selected
                }

                // Clear errors
                clearError();

                // Ensure the "Next" button for the current step is visible
                if (stepNumber === 1) {
                    document
                        .getElementById("nextStep1")
                        .classList.remove("hidden");
                } else if (stepNumber === 2) {
                    document
                        .getElementById("nextStep2")
                        .classList.remove("hidden");
                }
                // Enable resend button countdown when showing step 4
                if (stepNumber === 4) {
                    enableResendButton();
                }
            }

            // Function to handle resending verification code
            function resendVerificationCode() {
                showLoading();

                const phone = document.getElementById("phone").value;
                const fullName = document.getElementById("full_name").value;

                fetch(
                    "https://fixidev.com/fixiapp/api/resend-verification-code",
                    {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            phone: phone,
                            full_name: fullName,
                        }),
                    }
                )
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.status === "success") {
                            showSuccess(
                                "Code de vérification renvoyé avec succès!"
                            );
                            setTimeout(() => {
                                clearError();
                            }, 3000);
                        } else {
                            showError(
                                data.message ||
                                    "Échec de l'envoi du code de vérification."
                            );
                        }
                    })
                    .catch((error) => {
                        console.error("Error:", error);
                        showError(
                            "Une erreur s'est produite lors de l'envoi du code."
                        );
                    })
                    .finally(() => {
                        hideLoading();
                    });
            }

            // Enable resend button after 60 seconds when reaching step 4
            function enableResendButton() {
                const resendBtn = document.getElementById("resendCode");
                const resendNote = document.getElementById("resendNote");

                resendBtn.disabled = true;

                let secondsLeft = 60;

                const countdownInterval = setInterval(() => {
                    const minutes = Math.floor(secondsLeft / 60);
                    const seconds = secondsLeft % 60;

                    resendNote.textContent = `Vous pouvez demander un nouveau code dans ${minutes}m ${seconds}s.`;
                    secondsLeft--;

                    if (secondsLeft < 0) {
                        clearInterval(countdownInterval);
                        resendBtn.disabled = false;
                        resendNote.textContent =
                            "Vous pouvez maintenant demander un nouveau code.";
                    }
                }, 1000);
            }

            // Event listeners
            document
                .getElementById("resendCode")
                .addEventListener("click", function () {
                    const resendBtn = document.getElementById("resendCode");
                    resendBtn.disabled = true;
                    resendVerificationCode();
                    enableResendButton();
                });

            document.getElementById("prev1").addEventListener("click", () => {
                showStep("step1");
            });

            // Rest of your existing event listeners and functions...
            document
                .getElementById("nextStep1")
                .addEventListener("click", () => {
                    if (!selectedDate) {
                        showError("Veuillez sélectionner une date.");
                        document
                            .getElementById("datePicker")
                            .classList.add("border-red-500");
                        return;
                    }
                    document
                        .getElementById("datePicker")
                        .classList.remove("border-red-500");
                    document
                        .getElementById("nextStep1")
                        .classList.add("hidden");
                    fetchTimeSlots(selectedDate);
                    showStep("step2");
                });

            document
                .getElementById("nextStep2")
                .addEventListener("click", () => {
                    if (!selectedTime) {
                        showError("Veuillez sélectionner un créneau horaire.");
                        return;
                    }
                    document
                        .getElementById("nextStep2")
                        .classList.add("hidden");
                    showStep("step3");
                });

            // Function to toggle the modal
            function toggleModal(show, modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.classList.toggle("hidden", !show);
                }
            }

            // Function to handle confirmed Modify action
            function confirmModify() {
                toggleModal(false, "confirmationModalModify"); // Hide the modal

                // Reset selected  time
                selectedTime = "";

                // Clear the time slots display
                document.getElementById("times").innerHTML = "";

                // Go back to Step 1 (Date Selection)
                showStep("step1");

                // Clear the summary section
                updateSummary("", "");

                // Show the "Next" button for Step 1
                document.getElementById("nextStep1").classList.remove("hidden");
                document.getElementById("step2").classList.add("hidden");
                document.getElementById("step3").classList.add("hidden");
            }

            // Function to handle confirmed Cancel action
            function confirmCancel() {
                toggleModal(false, "confirmationModalCancel"); // Hide the modal
                // Redirect the user to the previous page (garage page)
                window.history.back();

                // Reset the form and selections
                selectedDate = "";
                selectedTime = "";
                document.getElementById("datePicker").value = "";
                document.getElementById("times").innerHTML = "";

                // Clear the summary section
                updateSummary("", "");

                // Go back to Step 1
                showStep("step1");

                // Show the "Next" button for Step 1
                document.getElementById("nextStep1").classList.remove("hidden");
                document.getElementById("step2").classList.add("hidden");
                document.getElementById("step3").classList.add("hidden");
            }

            // Event listener for the Modify button
            document
                .getElementById("modify-btn")
                .addEventListener("click", () => {
                    toggleModal(true, "confirmationModalModify"); // Show the Modify confirmation modal
                });

            // Event listener for the Cancel button
            document
                .getElementById("cancel-btn")
                .addEventListener("click", () => {
                    toggleModal(true, "confirmationModalCancel"); // Show the Cancel confirmation modal
                });

            // Fetch available dates from the API
            function fetchAvailableDates() {
                showLoading(); // Show spinner
                fetch(
                    `https://fixidev.com/fixiapp/api/available-dates?garage_ref=${garageRef}`
                )
                    .then((response) => response.json())
                    .then((data) => {
                        if (
                            data.available_dates &&
                            data.available_dates.length > 0
                        ) {
                            availableDates = data.available_dates;
                            disabledDates = data.unavailable_dates;
                            initDatePicker();
                            // Populate services dropdown
                            if (data.services && data.services.length > 0) {
                                populateServicesDropdown(data.services);
                            }

                            // Populate marques input with datalist
                            if (data.marques && data.marques.length > 0) {
                                populateMarquesInput(data.marques);
                            }
                        } else {
                            showError("Aucune date disponible pour ce garage.");
                        }
                    })
                    .catch((error) => {
                        console.error("Error fetching available dates:", error);
                        showError("Échec du chargement des dates disponibles.");
                    })
                    .finally(() => {
                        hideLoading(); // Hide spinner
                    });
            }

            // Function to populate the services dropdown
            function populateServicesDropdown(services) {
                const serviceMapping = {
                    Mécanique: "Services d'un garage mécanique",
                    Lavage: "Services d'un garage de lavage",
                    Carrosserie: "Services d'un garage de carrosserie",
                    Pneumatique: "Services d'un garage pneumatique",
                    Dépannage: "Services d'un garage dépannage",
                };
                const servicesSelect = document.getElementById(
                    "categorie_de_service"
                );
                servicesSelect.innerHTML = ""; // Clear existing options

                // Add services as options
                // Add a default option
                const defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "Choisir le domaine";
                defaultOption.disabled = true;
                defaultOption.selected = true;
                servicesSelect.appendChild(defaultOption);

                services.forEach((service) => {
                    const fullServiceName = serviceMapping[service] || service; // Use mapping or fallback to the original name
                    const option = document.createElement("option");
                    option.value = fullServiceName; // Use the full name as the value
                    option.textContent = fullServiceName; // Display the full name
                    servicesSelect.appendChild(option);
                });
            }

            // Function to populate the marques input with a datalist
            function populateMarquesInput(marques) {
                const marquesInput = document.getElementById("modele");
                marquesInput.innerHTML = ""; // Clear existing options

                // Add a default option
                const defaultOption = document.createElement("option");
                defaultOption.value = "";
                defaultOption.textContent = "Sélectionnez une marque";
                defaultOption.disabled = true;
                defaultOption.selected = true;
                marquesInput.appendChild(defaultOption);

                // Add marques as options
                marques.forEach((marque) => {
                    const option = document.createElement("option");
                    option.value = marque;
                    option.textContent = marque;
                    marquesInput.appendChild(option);
                });
            }

            // Initialize the date picker
            function initDatePicker() {
                flatpickr("#datePicker", {
                    dateFormat: "d/m/Y",
                    locale: "fr",
                    enable: [
                        function (date) {
                            const formattedDate = flatpickr.formatDate(
                                date,
                                "Y-m-d"
                            );
                            return (
                                availableDates.includes(formattedDate) &&
                                !disabledDates.includes(formattedDate)
                            );
                        },
                    ],
                    onChange: function (selectedDates, dateStr) {
                        // Store the selected date in Y-m-d format for the backend
                        selectedDate = flatpickr.formatDate(
                            selectedDates[0],
                            "Y-m-d"
                        );
                        fetchTimeSlots(selectedDate); // Fetch available time slots
                        updateSummary(selectedDate, selectedTime); // Update the summary section
                    },
                });
            }

            // Fetch time slots for the selected date
            function fetchTimeSlots(date) {
                showLoading(); // Show spinner
                fetch(
                    `https://fixidev.com/fixiapp/api/time-slots?garage_ref=${garageRef}&date=${date}`
                )
                    .then((response) => response.json())
                    .then((data) => {
                        let timesDiv = document.getElementById("times");
                        timesDiv.innerHTML = `<h3 class='text-lg font-medium text-gray-900 mb-4'>Choisir l'heure</h3>`;

                        if (data.time_slots.length === 0) {
                            timesDiv.innerHTML =
                                "<p class='text-red-600'>Aucune plage horaire disponible pour ce jour.</p>";
                            // Show the "Prev" button
                            document
                                .getElementById("prev1")
                                .classList.remove("hidden");

                            // Hide the "Next" button
                            document
                                .getElementById("nextStep2")
                                .classList.add("hidden");
                        } else {
                            // Create a container for the buttons
                            const buttonsContainer =
                                document.createElement("div");
                            buttonsContainer.classList.add(
                                "grid",
                                "grid-cols-2",
                                "gap-4"
                            );
                            data.time_slots.forEach((time) => {
                                // Format the time to remove seconds
                                const formattedTime = time.slice(0, 5); // Extract "HH:MM" from "HH:MM:SS"
                                let btn = document.createElement("button");
                                btn.innerText = formattedTime;
                                btn.classList.add(
                                    "p-2.5",
                                    "text-sm",
                                    "font-medium",
                                    "text-center",
                                    "!bg-white",
                                    "border",
                                    "rounded-[20px]",
                                    "cursor-pointer",
                                    "!text-red-600",
                                    "!border-red-600",
                                    "!hover:text-white",
                                    "!hover:bg-red-600"
                                );

                                btn.onclick = () => {
                                    document
                                        .querySelectorAll("#times button")
                                        .forEach((button) => {
                                            button.classList.remove(
                                                "!bg-red-700",
                                                "!text-white"
                                            );
                                        });
                                    btn.classList.add(
                                        "!bg-red-700",
                                        "!text-white"
                                    );
                                    selectedTime = time;
                                    updateSummary(selectedDate, selectedTime); // Update the summary section
                                };

                                buttonsContainer.appendChild(btn);
                            });
                            // Append the buttons container to the times div
                            timesDiv.appendChild(buttonsContainer);
                            // Hide the "Prev" button
                            document
                                .getElementById("prev1")
                                .classList.add("hidden");

                            // Show the "Next" button
                            document
                                .getElementById("nextStep2")
                                .classList.remove("hidden");
                        }
                    })
                    .catch((error) => {
                        console.error("Error fetching time slots:", error);
                        showError("Échec du chargement des créneaux horaires.");
                    })
                    .finally(() => {
                        hideLoading(); // Hide spinner
                    });
            }

            // Event listener for "Next" button on Step 1
            document
                .getElementById("nextStep1")
                .addEventListener("click", () => {
                    if (!selectedDate) {
                        showError("Veuillez sélectionner une date.");
                        document
                            .getElementById("datePicker")
                            .classList.add("border-red-500");
                        return;
                    }
                    document
                        .getElementById("datePicker")
                        .classList.remove("border-red-500");
                    document
                        .getElementById("nextStep1")
                        .classList.add("hidden");
                    fetchTimeSlots(selectedDate);
                    showStep("step2"); // Move to Step 2 and update the title
                });

            // Event listener for "Next" button on Step 2
            document
                .getElementById("nextStep2")
                .addEventListener("click", () => {
                    if (!selectedTime) {
                        showError("Veuillez sélectionner un créneau horaire.");
                        return;
                    }
                    document
                        .getElementById("nextStep2")
                        .classList.add("hidden");
                    showStep("step3"); // Move to Step 3 and update the title
                });

            // Handle form submission
            document.getElementById("bookingForm").onsubmit = function (e) {
                e.preventDefault();

                // Get form values
                let fullName = document
                    .getElementById("full_name")
                    .value.trim();
                let phone = document.getElementById("phone").value.trim();
                let email = document.getElementById("email").value.trim();
                let categorie_de_service = document.getElementById(
                    "categorie_de_service"
                ).value;
                let modele = document.getElementById("modele").value;
                let objet_du_RDV =
                    document.getElementById("objet_du_RDV").value;

                // Validate form fields one by one
                if (!fullName) {
                    showError("Le nom est obligatoire.");
                    document
                        .getElementById("full_name")
                        .classList.add("border-red-500");
                    return;
                } else {
                    document
                        .getElementById("full_name")
                        .classList.remove("border-red-500");
                }

                // First check if empty
                if (!phone) {
                    showError("Veuillez entrer votre numéro de téléphone.");
                    document
                        .getElementById("phone")
                        .classList.add("!border-red-500");
                    return;
                }

                // Then validate Moroccan phone format
                const phoneRegex = /^(?:\+212|0)([6-7]\d{8})$/;
                if (!phoneRegex.test(phone)) {
                    showError("Format de téléphone invalide.");
                    document
                        .getElementById("phone")
                        .classList.add("!border-red-500");
                    return;
                } else {
                    document
                        .getElementById("phone")
                        .classList.remove("!border-red-500");
                }

                // if (email === "") {
                //   showError("Adresse e-mail est obligatoire.");
                //   document.getElementById("email").classList.add("!border-red-500");
                //   return;
                // } else {
                //   document.getElementById("email").classList.remove("!border-red-500");
                // }

                if (categorie_de_service === "") {
                    showError("Le domaine est obligatoire.");
                    document
                        .getElementById("categorie_de_service")
                        .classList.add("!border-red-500");
                    return;
                } else {
                    document
                        .getElementById("categorie_de_service")
                        .classList.remove("!border-red-500");
                }

                // If all fields are valid, proceed with form submission
                showLoading(); // Show spinner
                fetch("https://fixidev.com/fixiapp/api/book-appointment", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        full_name: fullName,
                        phone: phone,
                        email: email,
                        categorie_de_service: categorie_de_service,
                        modele: modele,
                        objet_du_RDV: objet_du_RDV,
                        garage_ref: garageRef,
                        appointment_day: selectedDate,
                        appointment_time: selectedTime,
                    }),
                })
                    .then((response) => response.json())
                    .then((data) => {
                        if (data.status === "verification_required") {
                            showStep("step4");
                        } else {
                            showError(
                                data.message ||
                                    "Une erreur est survenue. Réessayez."
                            );
                        }
                    })
                    .catch((error) => {
                        console.error("Error:", error);
                        showError("Une erreur est survenue. Réessayez.");
                    })
                    .finally(() => {
                        hideLoading(); // Hide spinner
                    });
            };

            // Handle verification code submission
            document
                .getElementById("verifyCode")
                .addEventListener("click", () => {
                    showLoading(); // Show spinner

                    let verificationCode = document
                        .getElementById("verificationCode")
                        .value.trim();

                    if (!verificationCode) {
                        showError("Veuillez entrer le code de vérification.");
                        hideLoading(); // Hide spinner if validation fails
                        return;
                    }

                    fetch(
                        "https://fixidev.com/fixiapp/api/appointments/verify",
                        {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                email: document.getElementById("email").value,
                                verification_code: verificationCode.toString(),
                                full_name:
                                    document.getElementById("full_name").value,
                                phone: document.getElementById("phone").value,
                                categorie_de_service: document.getElementById(
                                    "categorie_de_service"
                                ).value,
                                modele: document.getElementById("modele").value,
                                objet_du_RDV:
                                    document.getElementById("objet_du_RDV")
                                        .value,
                                garage_ref: garageRef,
                                appointment_day: selectedDate,
                                appointment_time: selectedTime,
                            }),
                        }
                    )
                        .then((response) => response.json())
                        .then((data) => {
                            if (
                                data.message ===
                                "Appointment booked successfully!"
                            ) {
                                if (data.account) {
                                    let form = document.createElement("form");
                                    form.method = "POST";
                                    form.action = `https://fixidev.com/success-page/?ejkn2=hzne2&garage_ref=${data.ref}`;

                                    let input = document.createElement("input");
                                    input.type = "hidden";
                                    input.name = "appointment";
                                    input.value = JSON.stringify(
                                        data.appointment
                                    ); // Convert to JSON

                                    form.appendChild(input);
                                    document.body.appendChild(form);
                                    form.submit();
                                } else {
                                    let form = document.createElement("form");
                                    form.method = "POST";
                                    form.action = `https://fixidev.com/success-page/?ejkn2=kmal4&garage_ref=${data.ref}`;

                                    let input = document.createElement("input");
                                    input.type = "hidden";
                                    input.name = "appointment";
                                    input.value = JSON.stringify(
                                        data.appointment
                                    ); // Convert to JSON

                                    form.appendChild(input);
                                    document.body.appendChild(form);
                                    form.submit();
                                }
                            } else {
                                showError(
                                    data.message ||
                                        "Code de vérification invalide."
                                );
                            }
                        })
                        .catch((error) => {
                            console.error("Error:", error);
                            showError("Code de vérification invalide.");
                        })
                        .finally(() => {
                            hideLoading(); // Hide spinner
                        });
                });
        </script>
    </body>
</html>
